#!/opt/nodejs/bin/node

const fs = require('fs')
const split = require('split')
const inspector = require('inspector')
const { spawn } = require('child_process')

console.log("START open-runtime-nodejs")

// Open named pipes
const inFd = fs.openSync('/tmp/runtime-input', 'r')
const outFd = fs.openSync('/tmp/runtime-output', 'w')

fs.createReadStream(null, {fd: inFd})
    .pipe(split())
    .on('data', processEvent)

module.paths.push(process.cwd())
const [module_name, func_name] = process.argv[2].split('.')
const package = require(module_name)
const handler = package[func_name]

async function processEvent (event) {
  if (!event)
    return
  console.log(`EVENT open-runtime-nodejs: ${JSON.stringify(event)}`)

  const parsedEvent = JSON.parse(event)

  let debuggerProxy
  if (parsedEvent._debugProxy) {
    debuggerProxy = spawn("socat", ["TCP:localhost:9229,forever", `TCP:${parsedEvent._debugProxy}`])
    inspector.open(9229, "localhost", true)
  }

  const result = await handler(parsedEvent)

  if (parsedEvent._debugProxy) {
      debuggerProxy.kill()
  }

  fs.writeSync(outFd, `${JSON.stringify(result)}\n`)
}

